alph  <- 1 # transparency of curves in geom_curve
angle <- 0.3 # angle of mid-segment with the edge
curv <- 0   # Curvature of curves
line_color <- "deeppink" # Color of curves in geom_curve
back_color <- "darkorchid4" # Background of the ggplot
ratio_f <- function(x) {1/x} # To calculate the longitude of mid-segments
# Generation on the fly of the dataset
accumulate(.f = function(old, y) {
if (y%%step!=0) mid_points(old, pond, angle, y) else con_points(old)
}, 1:niter,
.init=polygon(edges)) %>% bind_rows() -> df
# Plot
ggplot(df)+
geom_curve(aes(x=x, y=y, xend=xend, yend=yend),
curvature = curv,
color=line_color,
alpha=alph,
size=0.6)+
coord_equal()+
theme(legend.position  = "none",
panel.background = element_rect(fill=back_color),
plot.background  = element_rect(fill=back_color),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
# Plot
ggplot(df)+
geom_curve(aes(x=x, y=y, xend=xend, yend=yend),
curvature = curv,
color=line_color,
alpha=alph,
size=0.1)+
coord_equal()+
theme(legend.position  = "none",
panel.background = element_rect(fill=back_color),
plot.background  = element_rect(fill=back_color),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
# Plot
ggplot(df)+
geom_curve(aes(x=x, y=y, xend=xend, yend=yend),
curvature = curv,
color=line_color,
alpha=alph,
size=0.2)+
coord_equal()+
theme(legend.position  = "none",
panel.background = element_rect(fill=back_color),
plot.background  = element_rect(fill=back_color),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
# Plot
ggplot(df)+
geom_curve(aes(x=x, y=y, xend=xend, yend=yend),
curvature = curv,
color=line_color,
alpha=alph,
size=0.3)+
coord_equal()+
theme(legend.position  = "none",
panel.background = element_rect(fill=back_color),
plot.background  = element_rect(fill=back_color),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
# Plot
ggplot(df)+
geom_curve(aes(x=x, y=y, xend=xend, yend=yend),
curvature = curv,
color=line_color,
alpha=alph,
size=0.4)+
coord_equal()+
theme(legend.position  = "none",
panel.background = element_rect(fill=back_color),
plot.background  = element_rect(fill=back_color),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
out_file="plot_purple.png"
ggsave(out_file, width = 18, height = 18, units = "cm")
setwd("~/Documents/other_works/Generative_art/2020_01_04")
out_file="plot_purple.png"
ggsave(out_file, width = 10, height = 10, units = "cm")
back_color <- "darkslateblue" # Background of the ggplot
ratio_f <- function(x) {1/x} # To calculate the longitude of mid-segments
# Generation on the fly of the dataset
accumulate(.f = function(old, y) {
if (y%%step!=0) mid_points(old, pond, angle, y) else con_points(old)
}, 1:niter,
.init=polygon(edges)) %>% bind_rows() -> df
# Plot
ggplot(df)+
geom_curve(aes(x=x, y=y, xend=xend, yend=yend),
curvature = curv,
color=line_color,
alpha=alph,
size=0.4)+
coord_equal()+
theme(legend.position  = "none",
panel.background = element_rect(fill=back_color),
plot.background  = element_rect(fill=back_color),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
out_file="plot_purple.png"
ggsave(out_file, width = 10, height = 10, units = "cm")
back_color <- "mediumpurple4" # Background of the ggplot
ratio_f <- function(x) {1/x} # To calculate the longitude of mid-segments
# Generation on the fly of the dataset
accumulate(.f = function(old, y) {
if (y%%step!=0) mid_points(old, pond, angle, y) else con_points(old)
}, 1:niter,
.init=polygon(edges)) %>% bind_rows() -> df
# Plot
ggplot(df)+
geom_curve(aes(x=x, y=y, xend=xend, yend=yend),
curvature = curv,
color=line_color,
alpha=alph,
size=0.4)+
coord_equal()+
theme(legend.position  = "none",
panel.background = element_rect(fill=back_color),
plot.background  = element_rect(fill=back_color),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
out_file="plot_purple.png"
ggsave(out_file, width = 10, height = 10, units = "cm")
edges <- 5   # Number of edges of the original polygon
niter <- 500 # Number of iterations
pond <- 0.3  # Weight to calculate the point on the middle of each edge
step  <- 20  # No of times to draw mid-segments before connect ending points
alph  <- 1 # transparency of curves in geom_curve
angle <- 0.3 # angle of mid-segment with the edge
curv <- 0   # Curvature of curves
line_color <- "deeppink" # Color of curves in geom_curve
back_color <- "mediumpurple4" # Background of the ggplot
ratio_f <- function(x) {1/x} # To calculate the longitude of mid-segments
# Generation on the fly of the dataset
accumulate(.f = function(old, y) {
if (y%%step!=0) mid_points(old, pond, angle, y) else con_points(old)
}, 1:niter,
.init=polygon(edges)) %>% bind_rows() -> df
# Plot
ggplot(df)+
geom_curve(aes(x=x, y=y, xend=xend, yend=yend),
curvature = curv,
color=line_color,
alpha=alph,
size=0.4)+
coord_equal()+
theme(legend.position  = "none",
panel.background = element_rect(fill=back_color),
plot.background  = element_rect(fill=back_color),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
edges <- 6   # Number of edges of the original polygon
niter <- 500 # Number of iterations
pond <- 0.3  # Weight to calculate the point on the middle of each edge
step  <- 20  # No of times to draw mid-segments before connect ending points
alph  <- 1 # transparency of curves in geom_curve
angle <- 0.3 # angle of mid-segment with the edge
curv <- 0   # Curvature of curves
line_color <- "deeppink" # Color of curves in geom_curve
back_color <- "mediumpurple4" # Background of the ggplot
ratio_f <- function(x) {1/x} # To calculate the longitude of mid-segments
# Generation on the fly of the dataset
accumulate(.f = function(old, y) {
if (y%%step!=0) mid_points(old, pond, angle, y) else con_points(old)
}, 1:niter,
.init=polygon(edges)) %>% bind_rows() -> df
# Plot
ggplot(df)+
geom_curve(aes(x=x, y=y, xend=xend, yend=yend),
curvature = curv,
color=line_color,
alpha=alph,
size=0.4)+
coord_equal()+
theme(legend.position  = "none",
panel.background = element_rect(fill=back_color),
plot.background  = element_rect(fill=back_color),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
edges <- 7   # Number of edges of the original polygon
niter <- 500 # Number of iterations
pond <- 0.3  # Weight to calculate the point on the middle of each edge
step  <- 20  # No of times to draw mid-segments before connect ending points
alph  <- 1 # transparency of curves in geom_curve
angle <- 0.3 # angle of mid-segment with the edge
curv <- 0   # Curvature of curves
line_color <- "deeppink" # Color of curves in geom_curve
back_color <- "mediumpurple4" # Background of the ggplot
ratio_f <- function(x) {1/x} # To calculate the longitude of mid-segments
# Generation on the fly of the dataset
accumulate(.f = function(old, y) {
if (y%%step!=0) mid_points(old, pond, angle, y) else con_points(old)
}, 1:niter,
.init=polygon(edges)) %>% bind_rows() -> df
# Plot
ggplot(df)+
geom_curve(aes(x=x, y=y, xend=xend, yend=yend),
curvature = curv,
color=line_color,
alpha=alph,
size=0.4)+
coord_equal()+
theme(legend.position  = "none",
panel.background = element_rect(fill=back_color),
plot.background  = element_rect(fill=back_color),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
edges <- 6   # Number of edges of the original polygon
niter <- 500 # Number of iterations
pond <- 0.4  # Weight to calculate the point on the middle of each edge
step  <- 20  # No of times to draw mid-segments before connect ending points
alph  <- 1 # transparency of curves in geom_curve
angle <- 0.3 # angle of mid-segment with the edge
curv <- 0   # Curvature of curves
line_color <- "deeppink" # Color of curves in geom_curve
back_color <- "mediumpurple4" # Background of the ggplot
ratio_f <- function(x) {1/x} # To calculate the longitude of mid-segments
# Generation on the fly of the dataset
accumulate(.f = function(old, y) {
if (y%%step!=0) mid_points(old, pond, angle, y) else con_points(old)
}, 1:niter,
.init=polygon(edges)) %>% bind_rows() -> df
# Plot
ggplot(df)+
geom_curve(aes(x=x, y=y, xend=xend, yend=yend),
curvature = curv,
color=line_color,
alpha=alph,
size=0.4)+
coord_equal()+
theme(legend.position  = "none",
panel.background = element_rect(fill=back_color),
plot.background  = element_rect(fill=back_color),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
pond <- 0.1  # Weight to calculate the point on the middle of each edge
step  <- 20  # No of times to draw mid-segments before connect ending points
alph  <- 1 # transparency of curves in geom_curve
angle <- 0.3 # angle of mid-segment with the edge
curv <- 0   # Curvature of curves
line_color <- "deeppink" # Color of curves in geom_curve
back_color <- "mediumpurple4" # Background of the ggplot
ratio_f <- function(x) {1/x} # To calculate the longitude of mid-segments
# Generation on the fly of the dataset
accumulate(.f = function(old, y) {
if (y%%step!=0) mid_points(old, pond, angle, y) else con_points(old)
}, 1:niter,
.init=polygon(edges)) %>% bind_rows() -> df
# Plot
ggplot(df)+
geom_curve(aes(x=x, y=y, xend=xend, yend=yend),
curvature = curv,
color=line_color,
alpha=alph,
size=0.4)+
coord_equal()+
theme(legend.position  = "none",
panel.background = element_rect(fill=back_color),
plot.background  = element_rect(fill=back_color),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
out_file="plot_purple.png"
out_file="plot_purple2.png"
ggsave(out_file, width = 10, height = 10, units = "cm")
alph  <- 0.5 # transparency of curves in geom_curve
angle <- 0.3 # angle of mid-segment with the edge
curv <- 0   # Curvature of curves
line_color <- "deeppink" # Color of curves in geom_curve
back_color <- "mediumpurple4" # Background of the ggplot
ratio_f <- function(x) {1/x} # To calculate the longitude of mid-segments
# Generation on the fly of the dataset
accumulate(.f = function(old, y) {
if (y%%step!=0) mid_points(old, pond, angle, y) else con_points(old)
}, 1:niter,
.init=polygon(edges)) %>% bind_rows() -> df
# Plot
ggplot(df)+
geom_curve(aes(x=x, y=y, xend=xend, yend=yend),
curvature = curv,
color=line_color,
alpha=alph,
size=0.4)+
coord_equal()+
theme(legend.position  = "none",
panel.background = element_rect(fill=back_color),
plot.background  = element_rect(fill=back_color),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
alph  <- 0.7 # transparency of curves in geom_curve
angle <- 0.3 # angle of mid-segment with the edge
curv <- 0   # Curvature of curves
line_color <- "deeppink" # Color of curves in geom_curve
back_color <- "mediumpurple4" # Background of the ggplot
ratio_f <- function(x) {1/x} # To calculate the longitude of mid-segments
# Generation on the fly of the dataset
accumulate(.f = function(old, y) {
if (y%%step!=0) mid_points(old, pond, angle, y) else con_points(old)
}, 1:niter,
.init=polygon(edges)) %>% bind_rows() -> df
# Plot
ggplot(df)+
geom_curve(aes(x=x, y=y, xend=xend, yend=yend),
curvature = curv,
color=line_color,
alpha=alph,
size=0.4)+
coord_equal()+
theme(legend.position  = "none",
panel.background = element_rect(fill=back_color),
plot.background  = element_rect(fill=back_color),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
out_file="plot_purple2.png"
ggsave(out_file, width = 10, height = 10, units = "cm")
edges <- 6   # Number of edges of the original polygon
niter <- 500 # Number of iterations
pond <- 0.1  # Weight to calculate the point on the middle of each edge
step  <- 23  # No of times to draw mid-segments before connect ending points
alph  <- 0.7 # transparency of curves in geom_curve
angle <- 0.3 # angle of mid-segment with the edge
curv <- 0   # Curvature of curves
line_color <- "deeppink" # Color of curves in geom_curve
back_color <- "mediumpurple4" # Background of the ggplot
ratio_f <- function(x) {1/x} # To calculate the longitude of mid-segments
# Generation on the fly of the dataset
accumulate(.f = function(old, y) {
if (y%%step!=0) mid_points(old, pond, angle, y) else con_points(old)
}, 1:niter,
.init=polygon(edges)) %>% bind_rows() -> df
# Plot
ggplot(df)+
geom_curve(aes(x=x, y=y, xend=xend, yend=yend),
curvature = curv,
color=line_color,
alpha=alph,
size=0.4)+
coord_equal()+
theme(legend.position  = "none",
panel.background = element_rect(fill=back_color),
plot.background  = element_rect(fill=back_color),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
edges <- 6   # Number of edges of the original polygon
niter <- 500 # Number of iterations
pond <- 0.1  # Weight to calculate the point on the middle of each edge
step  <- 20  # No of times to draw mid-segments before connect ending points
alph  <- 0.7 # transparency of curves in geom_curve
angle <- 0.2 # angle of mid-segment with the edge
curv <- 0   # Curvature of curves
line_color <- "deeppink" # Color of curves in geom_curve
back_color <- "mediumpurple4" # Background of the ggplot
ratio_f <- function(x) {1/x} # To calculate the longitude of mid-segments
# Generation on the fly of the dataset
accumulate(.f = function(old, y) {
if (y%%step!=0) mid_points(old, pond, angle, y) else con_points(old)
}, 1:niter,
.init=polygon(edges)) %>% bind_rows() -> df
# Plot
ggplot(df)+
geom_curve(aes(x=x, y=y, xend=xend, yend=yend),
curvature = curv,
color=line_color,
alpha=alph,
size=0.4)+
coord_equal()+
theme(legend.position  = "none",
panel.background = element_rect(fill=back_color),
plot.background  = element_rect(fill=back_color),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
edges <- 6   # Number of edges of the original polygon
niter <- 500 # Number of iterations
pond <- 0.1  # Weight to calculate the point on the middle of each edge
step  <- 20  # No of times to draw mid-segments before connect ending points
alph  <- 0.7 # transparency of curves in geom_curve
angle <- 0.3 # angle of mid-segment with the edge
curv <- 0.1   # Curvature of curves
line_color <- "deeppink" # Color of curves in geom_curve
back_color <- "mediumpurple4" # Background of the ggplot
ratio_f <- function(x) {1/x} # To calculate the longitude of mid-segments
# Generation on the fly of the dataset
accumulate(.f = function(old, y) {
if (y%%step!=0) mid_points(old, pond, angle, y) else con_points(old)
}, 1:niter,
.init=polygon(edges)) %>% bind_rows() -> df
# Plot
ggplot(df)+
geom_curve(aes(x=x, y=y, xend=xend, yend=yend),
curvature = curv,
color=line_color,
alpha=alph,
size=0.4)+
coord_equal()+
theme(legend.position  = "none",
panel.background = element_rect(fill=back_color),
plot.background  = element_rect(fill=back_color),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
edges <- 6   # Number of edges of the original polygon
niter <- 500 # Number of iterations
pond <- 0.14  # Weight to calculate the point on the middle of each edge
step  <- 20  # No of times to draw mid-segments before connect ending points
alph  <- 0.7 # transparency of curves in geom_curve
angle <- 0.3 # angle of mid-segment with the edge
curv <- 0   # Curvature of curves
line_color <- "deeppink" # Color of curves in geom_curve
back_color <- "mediumpurple4" # Background of the ggplot
ratio_f <- function(x) {1/x} # To calculate the longitude of mid-segments
# Generation on the fly of the dataset
accumulate(.f = function(old, y) {
if (y%%step!=0) mid_points(old, pond, angle, y) else con_points(old)
}, 1:niter,
.init=polygon(edges)) %>% bind_rows() -> df
# Plot
ggplot(df)+
geom_curve(aes(x=x, y=y, xend=xend, yend=yend),
curvature = curv,
color=line_color,
alpha=alph,
size=0.4)+
coord_equal()+
theme(legend.position  = "none",
panel.background = element_rect(fill=back_color),
plot.background  = element_rect(fill=back_color),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
# Plot
ggplot(df)+
geom_curve(aes(x=x, y=y, xend=xend, yend=yend),
curvature = curv,
color=line_color,
alpha=alph,
size=0.4)+
coord_equal()+
theme(legend.position  = "none",
panel.background = element_rect(fill=back_color),
plot.background  = element_rect(fill=back_color),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
edges <- 6   # Number of edges of the original polygon
niter <- 500 # Number of iterations
pond <- 0.1  # Weight to calculate the point on the middle of each edge
step  <- 20  # No of times to draw mid-segments before connect ending points
alph  <- 0.7 # transparency of curves in geom_curve
angle <- 0.4 # angle of mid-segment with the edge
curv <- 0   # Curvature of curves
line_color <- "deeppink" # Color of curves in geom_curve
back_color <- "mediumpurple4" # Background of the ggplot
ratio_f <- function(x) {1/x} # To calculate the longitude of mid-segments
# Generation on the fly of the dataset
accumulate(.f = function(old, y) {
if (y%%step!=0) mid_points(old, pond, angle, y) else con_points(old)
}, 1:niter,
.init=polygon(edges)) %>% bind_rows() -> df
# Plot
ggplot(df)+
geom_curve(aes(x=x, y=y, xend=xend, yend=yend),
curvature = curv,
color=line_color,
alpha=alph,
size=0.4)+
coord_equal()+
theme(legend.position  = "none",
panel.background = element_rect(fill=back_color),
plot.background  = element_rect(fill=back_color),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
out_file="plot_purple2.png"
ggsave(out_file, width = 5, height = 5, units = "cm")
ggsave(out_file, width = 10, height = 10, units = "cm")
